let patternCount (text : string) (pattern : string) : int =
    seq { 0 .. (text.Length - pattern.Length) }
    |> Seq.sumBy (fun i ->
        if text.Substring(i, pattern.Length) = pattern
        then 1
        else 0)

let frequentWords (text : string) (k : int) = 
    let a = Array.create (text.Length - k + 1) 0
    for i in 0 .. text.Length - k do
        a.[i] <- patternCount text (text.Substring (i, k))
    let max = Array.max a
    seq { 0 .. text.Length - k }
    |> Seq.filter (fun i -> a.[i] = max)
    |> Seq.map (fun i -> text.Substring (i, k))
    |> Seq.distinct
    |> String.concat " "

let reverseComplement (pattern : string) =
    pattern
    |> Seq.choose (function 
    | 'A' | 'a' -> Some 'T'
    | 'T' | 't' -> Some 'A'
    | 'C' | 'c' -> Some 'G'
    | 'G' | 'g' -> Some 'C'
    | _ -> None)
    |> Seq.rev 
    |> Seq.toArray
    |> (fun s -> System.String (s))

//patternCount "CTCAGTTCTCAGTTTACTACTCAGTTCTCAGTTTCGCTCAGTTCTCAGTTGGGTGCTCAGTTCTCAGTTATCTCAGTTCCTCAGTTCTCAGTTCAGACTCAGTTTCTCAGTTCTCAGTTGACTCAGTTGGACTCAGTTCTCAGTTTTTACTCAGTTCACTCAGTTATCTCAGTTTCGTGATTTCTCAGTTCCGCTCAGTTCGACTCAGTTCCTCAGTTTGCTCAGTTATCTCAGTTCTCAGTTTTATTTTCCACTCAGTTCGTCTCAGTTGCTCAGTTTGCTCAGTTGCCTCAGTTTCCTCAGTTCTCAGTTCAGCTCAGTTGTAATACTCAGTTACTGGATGCTCAGTTGACTCAGTTCTCAGTTTGTCGCCTCAGTTACTCAGTTAACTCAGTTTAGCCGGCTCAGTTCTCAGTTCTCAGTTAATACTCAGTTCGCTCAGTTCTCAGTTTGTGCTCAGTTTTTAGACTCAGTTACTCAGTTCTCAGTTGGCTCAGTTACTAGGCTCAGTTTCTCAGTTCTCAGTTCCTCAGTTGCTCAGTTCTCAGTTTCTCAGTTCTCTCAGTTGATTCTCAGTTATAATGCATCTCAGTTCGACTCAGTTTGGCTCAGTTCTCAGTTCCCGTCTACTCTCAGTTCGACCTCAGTTCTCAGTTTCTCAGTTGGTTGCCAACGGTCATCTCAGTTCCTCAGTTCCTCAGTTGGTCTCAGTTTGCTAGCTCAGTTATATCTCAGTTTGTCTCAGTTCTCAGTTGTACTCAGTTTCTCTCAGTTCTCAGTTATGGCTCAGTTCTCAGTTATACTCTCAGTTCTCAGTTAAGCACTCAGTTCGTACAGCTGCCGCTCAGTTCACTCAGTTACTCAGTTCTCAGTTGGGTTAACAACGCTCAGTTCTCAGTTTTCTCAGTTCCACTCAGTTTCGAGGGCTCAGTTGACTCAGTTCTCTCAGTTGAATTACTCAGTTACTAACCTCTCAGTTCTCTCAGTTGGCAAAGGGAGCTCAGTT" "CTCAGTTCT"
//frequentWords "ACGTTGCATGTCGCATGATGCATGAGAGCT" 4
System.IO.File.ReadAllText "/home/javier/Downloads/dataset_3_2 (3).txt"
|> reverseComplement
|> (fun s -> System.IO.File.WriteAllText ("/home/javier/Downloads/result.txt", s, System.Text.Encoding.ASCII))